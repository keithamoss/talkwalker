{"version":3,"sources":["shared/words.tsx","pages/Home.tsx","App.tsx","features/counter/counterReducer.ts","store.ts","features/counter/actionTypes.ts","index.tsx"],"names":["readWordsFile","resolve","reject","a","axios","get","window","location","protocol","host","response","wordsList","data","findMatchingWords","term","Promise","length","regex","RegExp","replace","matchedWordsList","Papa","parse","worker","fastMode","step","results","word","test","push","complete","error","useStyles","makeStyles","theme","root","marginTop","spacing","display","flexDirection","alignItems","form","padding","input","marginBottom","marginLeft","flex","gridContainer","grid","width","Home","classes","React","useState","searchTermRaw","setSearchTerm","useDebounce","searchTerm","searchTermForHighlighter","isWordsListLoaded","setIsWordsListLoaded","isLoading","setIsLoading","errorMessage","setErrorMessage","matchingWordsList","setMatchingWordsList","useEffect","message","Container","component","maxWidth","className","Typography","variant","role","aria-label","Grid","container","style","item","Paper","onSubmit","e","preventDefault","InputBase","placeholder","disabled","onChange","event","target","value","inputProps","name","enterkeyhint","autoComplete","defaultValue","endAdornment","InputAdornment","position","IconButton","type","color","LinearProgress","List","ListItem","ListItemIcon","ListItemText","primary","map","key","highlightClassName","searchWords","autoEscape","textToHighlight","App","prefersDarkMode","useMediaQuery","defaultMatches","useMemo","createMuiTheme","palette","background","default","main","blue","secondary","pink","darken","A400","ThemeProvider","CssBaseline","path","exact","initialState","rootReducer","combineReducers","count","state","action","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.76200304.chunk.js","sourcesContent":["import axios from 'axios'\nimport Papa from 'papaparse'\n\nexport const readWordsFile = (resolve: Function, reject: Function) => {\n  ;(async () => {\n    try {\n      const response = await axios.get(\n        `${window.location.protocol}//${window.location.host}/english-words/words.txt`\n      )\n      window.wordsList = response.data\n      resolve()\n    } catch (error) {\n      reject(error)\n    }\n  })()\n}\n\nexport const findMatchingWords = async (term: string): Promise<string[]> => {\n  return new Promise((resolve, reject) => {\n    if (typeof term !== 'string' || term.length < 4) {\n      return resolve([])\n    }\n\n    if (typeof window.wordsList === 'string') {\n      const regex = new RegExp(\n        `^${term.replace('*', '.{0,}').replace('?', '.{1}')}$`,\n        'i'\n      )\n      const matchedWordsList: string[] = []\n\n      Papa.parse(window.wordsList, {\n        worker: true,\n        fastMode: true,\n        step: (results: any) => {\n          const [word] = results.data\n          if (regex.test(word) === true) {\n            matchedWordsList.push(word)\n          }\n        },\n        complete: () => {\n          resolve(matchedWordsList)\n        },\n        error: (error: any) => {\n          reject(error)\n        },\n      })\n    }\n  })\n}\n\nexport const stripTalkWalkerOperators = (string: string) =>\n  string.replace(/[*?]/g, '')\n","import { Container, Grid, IconButton, InputAdornment, InputBase, LinearProgress, List, ListItem, ListItemIcon, ListItemText, Paper } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport ErrorTwoToneIcon from '@material-ui/icons/ErrorTwoTone'\nimport SearchIcon from '@material-ui/icons/Search'\nimport React, { Fragment } from 'react'\nimport Highlighter from 'react-highlight-words'\nimport { useDebounce } from 'use-debounce'\nimport { isDev } from '../shared/utils'\nimport { findMatchingWords, readWordsFile, stripTalkWalkerOperators } from '../shared/words'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  input: {\n    marginTop: theme.spacing(0.75),\n    marginBottom: theme.spacing(0.75),\n    marginLeft: theme.spacing(1.25),\n    flex: 1,\n  },\n  gridContainer: {\n    marginTop: 25,\n  },\n  grid: {\n    width: '100%',\n  },\n}))\n\nexport const Home: React.FC = () => {\n  const classes = useStyles()\n\n  const [searchTermRaw, setSearchTerm] = React.useState<string>(\n    isDev() ? '' : ''\n  )\n  const [searchTerm] = useDebounce(searchTermRaw, 500)\n  const searchTermForHighlighter = stripTalkWalkerOperators(searchTerm)\n\n  const [isWordsListLoaded, setIsWordsListLoaded] = React.useState<boolean>(\n    false\n  )\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\n  const [errorMessage, setErrorMessage] = React.useState<string | null>(null)\n  const [matchingWordsList, setMatchingWordsList] = React.useState<\n    string[] | null\n  >(null)\n\n  React.useEffect(() => {\n    ;(async () => {\n      if (searchTerm.length >= 4) {\n        setIsLoading(true)\n        setErrorMessage(null)\n\n        try {\n          setMatchingWordsList(await findMatchingWords(searchTerm))\n        } catch (error) {\n          setErrorMessage(error.message)\n        }\n\n        setIsLoading(false)\n      }\n    })()\n  }, [searchTerm])\n\n  React.useEffect(() => {\n    setIsLoading(true)\n    ;(async () => {\n      readWordsFile(\n        () => {\n          setIsWordsListLoaded(true)\n          setIsLoading(false)\n        },\n        (error: Error) => {\n          setErrorMessage(error.message)\n        }\n      )\n    })()\n  }, [])\n\n  return (\n    <Fragment>\n      <Container component=\"main\" maxWidth=\"sm\">\n        <div className={classes.root}>\n          <Typography component=\"h1\" variant=\"h1\">\n            <span role=\"img\" aria-label=\"Magnifying glass tiled left\">\n              üîç\n            </span>\n          </Typography>\n          <Grid container style={{ marginTop: 25 }}>\n            <Grid item style={{ width: '100%' }}>\n              <Paper\n                component=\"form\"\n                className={classes.form}\n                onSubmit={(e) => {\n                  e.preventDefault()\n                }}\n              >\n                <InputBase\n                  className={classes.input}\n                  placeholder=\"Enter a TalkWalker word pattern (e.g. famil*)\"\n                  disabled={isWordsListLoaded === false}\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    if (event.target.value.length >= 4) {\n                      setSearchTerm(event.target.value)\n                    }\n                  }}\n                  inputProps={{\n                    name: 'search',\n                    enterkeyhint: 'search',\n                    'aria-label': 'search term',\n                    autoComplete: 'off',\n                  }}\n                  defaultValue={searchTerm}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        type=\"submit\"\n                        color=\"primary\"\n                        aria-label=\"submit search form\"\n                      >\n                        <SearchIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </Paper>\n            </Grid>\n\n            <Grid container className={classes.gridContainer}>\n              <Grid item className={classes.grid}>\n                {isLoading === true && <LinearProgress variant=\"query\" />}\n\n                {errorMessage !== null && (\n                  <List aria-label=\"error message\">\n                    <ListItem>\n                      <ListItemIcon>\n                        <ErrorTwoToneIcon color=\"error\" />\n                      </ListItemIcon>\n                      <ListItemText primary={errorMessage} />\n                    </ListItem>\n                  </List>\n                )}\n\n                {isLoading === false && errorMessage === null && (\n                  <List aria-label=\"word list\">\n                    {searchTerm.length >= 4 &&\n                      matchingWordsList !== null &&\n                      matchingWordsList.length === 0 && (\n                        <ListItem>\n                          <ListItemText primary=\"No matching words found üò¢\" />\n                        </ListItem>\n                      )}\n\n                    {matchingWordsList !== null &&\n                      matchingWordsList.length > 0 &&\n                      matchingWordsList.map((word: string) => {\n                        return (\n                          <ListItem key={word}>\n                            <ListItemText>\n                              <Highlighter\n                                highlightClassName=\"wordHighlighter\"\n                                searchWords={[searchTermForHighlighter]}\n                                autoEscape\n                                textToHighlight={word}\n                              />\n                            </ListItemText>\n                          </ListItem>\n                        )\n                      })}\n                  </List>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    </Fragment>\n  )\n}\n","import { createMuiTheme, CssBaseline, darken, ThemeProvider, useMediaQuery } from '@material-ui/core'\nimport { blue, pink } from '@material-ui/core/colors'\nimport React, { Fragment } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { Home } from './pages/Home'\n\nconst App: React.FC = () => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n    // @ts-ignore-next-line\n    defaultMatches: null,\n  })\n\n  // Adapted from the custom dark mode colour scheme used by the Material-UI docs\n  // https://github.com/mui-org/material-ui/blob/master/docs/src/modules/components/ThemeContext.js#L180\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n          background: {\n            default: prefersDarkMode ? '#303030' : '#ffffff',\n          },\n          primary: {\n            main: prefersDarkMode ? blue[200] : blue[700],\n          },\n          secondary: {\n            main: prefersDarkMode ? pink[200] : darken(pink.A400, 0.1),\n          },\n        },\n      }),\n    [prefersDarkMode]\n  )\n\n  // Wait until the media query resolves to show the app\n  if (prefersDarkMode === null) {\n    return null\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        <Switch>\n          <Fragment>\n            <CssBaseline />\n            <div className=\"container\">\n              <Route path=\"/\" component={Home} exact />\n            </div>\n          </Fragment>\n        </Switch>\n      </HashRouter>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { INCREMENT_COUNTER, DECREMENT_COUNTER } from './actionTypes'\nimport { CounterActionTypes } from './types'\n\nconst initialState = {\n  value: 0,\n}\n\nexport default (state = initialState, action: CounterActionTypes) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return { ...state, value: state.value + 1 }\n    case DECREMENT_COUNTER:\n      return { ...state, value: state.value - 1 }\n    default:\n      return state\n  }\n}\n","import { combineReducers, createStore } from 'redux'\nimport { devToolsEnhancer } from 'redux-devtools-extension'\nimport { CounterReducer } from './features/counter'\n\n/* Create root reducer, containing all features of the application */\nconst rootReducer = combineReducers({\n  count: CounterReducer,\n})\n\nconst store = createStore(\n  rootReducer,\n  /* preloadedState, */ devToolsEnhancer({})\n)\n\nexport default store\n","export const INCREMENT_COUNTER = 'INCREMENT_COUNTER'\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport './index.css'\nimport store from './store'\n\ndeclare global {\n  interface Window {\n    wordsList: string | null\n  }\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}