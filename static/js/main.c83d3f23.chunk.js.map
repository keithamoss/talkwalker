{"version":3,"sources":["pages/Home.tsx","App.tsx","features/counter/counterReducer.ts","store.ts","features/counter/actionTypes.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","marginTop","spacing","display","flexDirection","alignItems","form","padding","input","marginBottom","marginLeft","flex","gridContainer","grid","width","findMatchingWords","term","a","Promise","resolve","reject","length","regex","RegExp","replace","wordList","Papa","parse","window","location","protocol","host","download","worker","step","results","word","data","test","push","complete","error","Home","classes","React","useState","searchTermRaw","setSearchTerm","useDebounce","searchTerm","isLoading","setIsLoading","setWordList","useEffect","Container","component","maxWidth","className","Typography","variant","role","aria-label","Grid","container","style","item","Paper","onSubmit","e","preventDefault","InputBase","placeholder","onChange","event","target","value","inputProps","name","enterkeyhint","autoComplete","defaultValue","endAdornment","InputAdornment","position","IconButton","type","color","LinearProgress","List","ListItem","ListItemText","primary","map","key","App","prefersDarkMode","useMediaQuery","defaultMatches","useMemo","createMuiTheme","palette","background","default","main","blue","secondary","pink","darken","A400","ThemeProvider","CssBaseline","path","exact","initialState","rootReducer","combineReducers","count","state","action","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c83d3f23.chunk.js","sourcesContent":["import { Container, Grid, IconButton, InputAdornment, InputBase, LinearProgress, List, ListItem, ListItemText, Paper } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Typography from '@material-ui/core/Typography'\nimport SearchIcon from '@material-ui/icons/Search'\nimport Papa from 'papaparse'\nimport React, { Fragment } from 'react'\nimport { useDebounce } from 'use-debounce'\nimport { isDev } from '../shared/utils'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  form: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  input: {\n    marginTop: theme.spacing(0.75),\n    marginBottom: theme.spacing(0.75),\n    marginLeft: theme.spacing(1.25),\n    flex: 1,\n  },\n  gridContainer: {\n    marginTop: 25,\n  },\n  grid: {\n    width: '100%',\n  },\n}))\n\nconst findMatchingWords = async (term: string): Promise<string[]> => {\n  return new Promise((resolve, reject) => {\n    if (typeof term !== 'string' || term.length < 4) {\n      return resolve([])\n    }\n\n    const regex = new RegExp(\n      `^${term.replace('*', '.{0,}').replace('?', '.{1}')}$`,\n      'i'\n    )\n    const wordList: string[] = []\n\n    Papa.parse(\n      // The worker needs a fully qualified URL\n      `${window.location.protocol}//${window.location.host}/english-words/words.txt`,\n      {\n        download: true,\n        worker: true,\n        step: (results: any) => {\n          const [word] = results.data\n          if (regex.test(word) === true) {\n            wordList.push(word)\n          }\n        },\n        complete: () => {\n          resolve(wordList)\n        },\n        error: (error: any) => {\n          reject(error)\n        },\n      }\n    )\n  })\n}\n\nexport const Home: React.FC = () => {\n  const classes = useStyles()\n\n  const [searchTermRaw, setSearchTerm] = React.useState<string>(\n    isDev() ? '' : ''\n  )\n  const [searchTerm] = useDebounce(searchTermRaw, 500)\n  const [isLoading, setIsLoading] = React.useState<boolean>(false)\n  const [wordList, setWordList] = React.useState<string[]>([])\n\n  React.useEffect(() => {\n    ;(async () => {\n      setIsLoading(true)\n      setWordList(await findMatchingWords(searchTerm))\n      setIsLoading(false)\n    })()\n  }, [searchTerm])\n\n  return (\n    <Fragment>\n      <Container component=\"main\" maxWidth=\"sm\">\n        <div className={classes.root}>\n          <Typography component=\"h1\" variant=\"h1\">\n            <span role=\"img\" aria-label=\"Magnifying glass tiled left\">\n              üîç\n            </span>\n          </Typography>\n          <Grid container style={{ marginTop: 25 }}>\n            <Grid item style={{ width: '100%' }}>\n              <Paper\n                component=\"form\"\n                className={classes.form}\n                onSubmit={(e) => {\n                  e.preventDefault()\n                }}\n              >\n                <InputBase\n                  className={classes.input}\n                  placeholder=\"Enter a TalkWalker word pattern (e.g. famil*)\"\n                  onChange={(event: React.ChangeEvent<HTMLInputElement>) => {\n                    if (event.target.value.length >= 4) {\n                      setSearchTerm(event.target.value)\n                    }\n                  }}\n                  inputProps={{\n                    name: 'search',\n                    enterkeyhint: 'search',\n                    'aria-label': 'search term',\n                    autoComplete: 'off',\n                  }}\n                  defaultValue={searchTerm}\n                  endAdornment={\n                    <InputAdornment position=\"end\">\n                      <IconButton\n                        type=\"submit\"\n                        color=\"primary\"\n                        aria-label=\"submit search form\"\n                      >\n                        <SearchIcon />\n                      </IconButton>\n                    </InputAdornment>\n                  }\n                />\n              </Paper>\n            </Grid>\n\n            <Grid container className={classes.gridContainer}>\n              <Grid item className={classes.grid}>\n                {isLoading === true && <LinearProgress variant=\"query\" />}\n\n                {isLoading === false && (\n                  <List component=\"nav\" aria-label=\"word list\">\n                    {searchTerm.length >= 4 && wordList.length === 0 && (\n                      <ListItem>\n                        <ListItemText primary=\"No matching words found üò¢\" />\n                      </ListItem>\n                    )}\n\n                    {wordList.length > 0 &&\n                      wordList.map((word: string) => {\n                        return (\n                          <ListItem key={word}>\n                            <ListItemText primary={word} />\n                          </ListItem>\n                        )\n                      })}\n                  </List>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    </Fragment>\n  )\n}\n","import { createMuiTheme, CssBaseline, darken, ThemeProvider, useMediaQuery } from '@material-ui/core'\nimport { blue, pink } from '@material-ui/core/colors'\nimport React, { Fragment } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { Home } from './pages/Home'\n\nconst App: React.FC = () => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)', {\n    // @ts-ignore-next-line\n    defaultMatches: null,\n  })\n\n  // Adapted from the custom dark mode colour scheme used by the Material-UI docs\n  // https://github.com/mui-org/material-ui/blob/master/docs/src/modules/components/ThemeContext.js#L180\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n          background: {\n            default: prefersDarkMode ? '#303030' : '#ffffff',\n          },\n          primary: {\n            main: prefersDarkMode ? blue[200] : blue[700],\n          },\n          secondary: {\n            main: prefersDarkMode ? pink[200] : darken(pink.A400, 0.1),\n          },\n        },\n      }),\n    [prefersDarkMode]\n  )\n\n  // Wait until the media query resolves to show the app\n  if (prefersDarkMode === null) {\n    return null\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <HashRouter>\n        <Switch>\n          <Fragment>\n            <CssBaseline />\n            <div className=\"container\">\n              <Route path=\"/\" component={Home} exact />\n            </div>\n          </Fragment>\n        </Switch>\n      </HashRouter>\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","import { INCREMENT_COUNTER, DECREMENT_COUNTER } from './actionTypes'\nimport { CounterActionTypes } from './types'\n\nconst initialState = {\n  value: 0,\n}\n\nexport default (state = initialState, action: CounterActionTypes) => {\n  switch (action.type) {\n    case INCREMENT_COUNTER:\n      return { ...state, value: state.value + 1 }\n    case DECREMENT_COUNTER:\n      return { ...state, value: state.value - 1 }\n    default:\n      return state\n  }\n}\n","import { combineReducers, createStore } from 'redux'\nimport { devToolsEnhancer } from 'redux-devtools-extension'\nimport { CounterReducer } from './features/counter'\n\n/* Create root reducer, containing all features of the application */\nconst rootReducer = combineReducers({\n  count: CounterReducer,\n})\n\nconst store = createStore(\n  rootReducer,\n  /* preloadedState, */ devToolsEnhancer({})\n)\n\nexport default store\n","export const INCREMENT_COUNTER = 'INCREMENT_COUNTER'\nexport const DECREMENT_COUNTER = 'DECREMENT_COUNTER'\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport App from './App'\nimport './index.css'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}